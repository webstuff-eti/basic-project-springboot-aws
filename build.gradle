plugins {
	id 'org.springframework.boot' version '2.5.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.palantir.docker" version "0.26.0"
	id 'java'
	id 'jacoco'
}

ext {
	appVersion = '1.0.5'
}

group = 'webstuff'
version = "${appVersion}"
sourceCompatibility = '11'

configurations {
	compileOnly { extendsFrom annotationProcessor }
	all { exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' }
}

repositories {
	mavenCentral()
	maven { url "https://plugins.gradle.org/m2/" }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	//Spring Framework
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//Lombok
	compileOnly 'org.projectlombok:lombok:1.18.16'
	annotationProcessor 'org.projectlombok:lombok:1.18.16'
	testCompileOnly 'org.projectlombok:lombok:1.18.16'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
}

// TEST
check.dependsOn jacocoTestCoverageVerification
jacoco {
	toolVersion = '0.8.6'
}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
			element = 'CLASS'
			excludes = []
		}
	}
}
jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		html.enabled true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [])
		}))
	}
}
test {
	useJUnitPlatform {
		includeEngines 'junit-jupiter', 'junit-vintage'
	}
	finalizedBy jacocoTestReport
}

// DOCKER
bootJar {
	baseName = 'base-project-spring-aws'
	version = "${appVersion}"
}
task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}
docker {
	name "${project.group}/${bootJar.baseName}"
	tags "${bootJar.version}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}
